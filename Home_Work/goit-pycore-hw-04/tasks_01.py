"""
Завдання 1

У вас є текстовий файл, який містить інформацію про місячні заробітні плати розробників у вашій компанії. Кожен рядок у файлі містить прізвище розробника та його заробітну плату, які розділені комою без пробілів.

Наприклад:
Alex Korp,3000
Nikita Borisenko,2000
Sitarama Raju,1000

Ваше завдання - розробити функцію total_salary(path), яка аналізує цей файл і повертає загальну та середню суму заробітної плати всіх розробників.

Вимоги до завдання:
Функція total_salary(path) має приймати один аргумент - шлях до текстового файлу (path).
Файл містить дані про заробітні плати розробників, розділені комами. Кожен рядок вказує на одного розробника.
Функція повинна аналізувати файл, обчислювати загальну та середню суму заробітної плати.
Результатом роботи функції є кортеж із двох чисел: загальної суми зарплат і середньої заробітної плати.

Рекомендації для виконання:
Використовуйте менеджер контексту with для читання файлів.
Пам'ятайте про встановлення кодування при відкриті файлів
Для розділення даних у кожному рядку можна застосувати метод split(',').
Обрахуйте загальну суму заробітної плати, а потім розділіть її на кількість розробників, щоб отримати середню зарплату.
Опрацьовуйте можливі винятки при роботі з файлами, такі як відсутність файлу.

Критерії оцінювання:
Функція повинна точно обчислювати загальну та середню суми.
Повинна бути обробка випадків, коли файл відсутній або пошкоджений.
Код має бути чистим, добре структурованим і зрозумілим.

Приклад використання функції:
total, average = total_salary("path/to/salary_file.txt")
print(f"Загальна сума заробітної плати: {total}, Середня заробітна плата: {average}")

Очікуваний результат:
Загальна сума заробітної плати: 6000, Середня заробітна плата: 2000
"""

import os


def total_salary(path: str) -> tuple[float, float]:
    total = 0.0
    count = 0

    try:
        # Використаємо менеджер контексту для безпечної роботи з файлом
        with open(path, 'r', encoding='utf-8') as file:
            for line in file:
                try:
                    # Розділимо рядок на ім'я та зарплату
                    parts = line.strip().split(',')
                    if len(parts) == 2:
                        salary = float(parts[1])
                        total += salary
                        count += 1
                    else:
                        # Ігноруємо рядки, що не відповідають формату "ім'я,зарплата"
                        print(f"Попередження: Неправильний формат рядка, рядок ігноровано: '{line.strip()}'")
                except ValueError:
                    # Ігноруємо рядки, де зарплата не є числом
                    print(f"Попередження: Не вдалося перетворити зарплату на число, рядок ігноровано: '{line.strip()}'")

    except FileNotFoundError:
        print(f"Помилка: Файл за шляхом '{path}' не знайдено.")
        return 0.0, 0.0
    except Exception as e:
        print(f"Сталася непередбачувана помилка: {e}")
        return 0.0, 0.0

    # Створимо перевірку, щоб уникнути ділення на нуль
    if count == 0:
        return 0.0, 0.0

    average = total / count
    return total, average

# --- Створимо текстовий файл та папки поруч зі скриптом ---
# 1. Отримаємо абсолютний шлях до папки, де знаходиться цей скрипт
script_dir = os.path.dirname(os.path.abspath(__file__))

# 2. Створимо шлях до папки 'data' всередині папки зі скриптом
data_dir_path = os.path.join(script_dir, 'data')

# 3. Створимо папку 'data', якщо її не існує
if not os.path.exists(data_dir_path):
    os.makedirs(data_dir_path)

# 4. Створимо повний шлях до файлу 'salary_file.txt'
file_path = os.path.join(data_dir_path, 'salary_file.txt')

# 5. Запишемо дані у файл, включаючи некоректні рядки для тестування
with open(file_path, 'w', encoding='utf-8') as f:
    f.write("Alex Korp,3000\n")
    f.write("Nikita Borisenko,2000\n")
    f.write("Sitarama Raju,1000\n")
    f.write("Some Malformed Line\n")  # Рядок з помилкою формату
    f.write("John Doe,five-thousand\n")  # Рядок з помилкою значення

print(f"Тестовий файл успішно створено за шляхом: {file_path}")

# --- Створимо приклад використання функції з правильним шляхом ---
print("\n--- Аналіз створеного файлу ---")
total, average = total_salary(file_path)
print(f"Загальна сума заробітної плати: {total}, Середня заробітна плата: {average:.2f}")

# --- Створимо приклад з неіснуючим файлом ---
print("\n--- Спроба прочитати неіснуючий файл ---")
non_existent_file_path = os.path.join(data_dir_path, "non_existent_file.txt")
total_non, average_non = total_salary(non_existent_file_path)
print(f"Результат для неіснуючого файлу: {total_non}, {average_non}")
